name: Build and Push Controller Docker Images

on:
  workflow_dispatch:
  push:
    tags:
      - "controller/v*"

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
     matrix:
        arch:
          - linux/amd64
          - linux/arm64
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Login to GHCR
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Rust nightly
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly
          targets: x86_64-unknown-linux-musl
          components: rustfmt, clippy, miri, rust-src

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          targets: x86_64-unknown-linux-musl
          components: rustfmt, clippy

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            controller/target/
          key: ${{ runner.os }}-cargo-${{ matrix.arch }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.arch }}-
            ${{ runner.os }}-cargo-

      - name: Set Build Arguments
        id: args
        run: |
          if [ "${{ matrix.arch }}" == "linux/arm64" ]; then
            echo "BUILD=aarch64-unknown-linux-gnu" >> $GITHUB_OUTPUT
          else
            echo "BUILD=x86_64-unknown-linux-gnu" >> $GITHUB_OUTPUT
          fi

      - name: Build Rust
        run: |
          sudo apt update -y

          sudo apt install linux-tools-common linux-tools-generic linux-tools-$(uname -r) -y

          cd controller

          cargo install cross --git https://github.com/cross-rs/cross

          cross build --target ${{ steps.args.outputs.BUILD }} --release

      - uses: actions/upload-artifact@330a01c490aca151604b8cf639adc76d48f6c5d4 # v5
        with:
          name: ${{ steps.args.outputs.BUILD }}-binary
          path: controller/target/${{ steps.args.outputs.BUILD }}/release/kguardian

  push:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3
        with:
          platforms: all

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3
        with:
          install: true
          version: latest

      - name: Login to GHCR
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/download-artifact@018cc2cf5baa6db3ef3c5f8a56943fffe632ef53 # v6
        with:
          name: x86_64-unknown-linux-gnu-binary
          path: controller/linux/amd64

      - uses: actions/download-artifact@018cc2cf5baa6db3ef3c5f8a56943fffe632ef53 # v6
        with:
          name: aarch64-unknown-linux-gnu-binary
          path: controller/linux/arm64

      - name: Extract tag name
        id: extract_tag
        run: |
          TAG="${GITHUB_REF#refs/tags/}"
          VERSION="${TAG#controller/}"
          echo "TAG_NAME=${VERSION}" >> $GITHUB_OUTPUT

      - name: Build and Push
        env:
          BUILDX_NO_DEFAULT_ATTESTATIONS: 1
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6
        with:
          context: controller/
          platforms: linux/amd64,linux/arm64,
          file: controller/Dockerfile
          push: true
          tags: |
            ghcr.io/kguardian-dev/kguardian/controller:${{ steps.extract_tag.outputs.TAG_NAME }}
            ghcr.io/kguardian-dev/kguardian/controller:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
